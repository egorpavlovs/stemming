
  
    

































    

    
    JSON:API — About
  

  
    
  
    
      
      
        JSON API
      
        Specification
      
        Extensions
      
        Recommendations
      
        Examples
      
        Implementations
      
        FAQ
      
        About
      
      
        v1.0 Stable
      
    
  


    
    
      
      
        
          
            About
          
        
        
          
           Channels

JSON:API is:


  @jsonapi on
Twitter
  #jsonapi channel on Freenode IRC
  jsonapi discussion forum


 Editors

There are five primary editors of this specification:


  Steve Klabnik
  Yehuda Katz
  Dan Gebhardt
  Tyler Kellen
  Ethan Resnick


 Roadmap

 1.1


  Embedding / creating multiple related resources in a single request
  Extension support


 History

JSON:API was originally drafted by Yehuda Katz
in May 2013. This first draft was extracted from the JSON transport
implicitly defined by Ember Data’s REST adapter.

In general, Ember Data’s goal is to eliminate the need for ad-hoc code
per application to communicate with servers that communicate in a
well-defined way.

Some servers, like Firebase, Parse and CouchDB already define strict
communication protocols for clients, and were good fits for Ember Data.
In contrast, servers written in Rails, Node, and Django tend to be
written in a “REST-style” but lack the precision necessary for drop-in
client code.

The REST Adapter in Ember Data implicitly defined a protocol that
custom servers could implement to get a drop-in client for all of their
resources. ActiveModel::Serializers is a proof-of-concept library
for Rails that implemented the serialization format expected by Ember
Data.

Record creation, update, and deletion was defined implicitly by the
Ember Data library and was close to conventions already in wide use by
Rails, Django and Node developers.

The goals of the media type are to balance:


  A generic media type that can work across a broad set of use cases,
including the generally used relationship types
  Similarity to existing server-side framework practices (and human
readability for debugging)
  Ease of implementation on the server side
  Ease of implementation on the client side


This specification reached a stable version 1.0 on May 29, 2015.

        
      
    
    
  
    Built with Jekyll and Highlight.js
    
      
    
    
      Twitter
      GitHub
      Discussion Forum
    
  



  

